// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package users

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO
    users (name)
VALUES
    ( $1 ) RETURNING id, name, created_at
`

func (q *Queries) AddUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, addUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    users
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id, name, created_at
FROM
    users
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, created_at
FROM users
WHERE 
    (CASE WHEN $1 <> '' THEN name ILIKE CONCAT('%', $1, '%') ELSE TRUE END)
ORDER BY 
    CASE WHEN $2::bool THEN created_at END asc,
    CASE WHEN $3::bool THEN created_at END desc,
    CASE WHEN $4::bool THEN id END asc,
    CASE WHEN $5::bool THEN id END desc,
    CASE WHEN $6::bool THEN name END asc,
    CASE WHEN $7::bool THEN name END desc
OFFSET NULLIF($8::int, 0)
LIMIT NULLIF($9::int, 0)
`

type GetUsersParams struct {
	Search        interface{}
	CreatedAtAsc  bool
	CreatedAtDesc bool
	IDAsc         bool
	IDDesc        bool
	NameAsc       bool
	NameDesc      bool
	OffsetAmount  int32
	LimitAmount   int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers,
		arg.Search,
		arg.CreatedAtAsc,
		arg.CreatedAtDesc,
		arg.IDAsc,
		arg.IDDesc,
		arg.NameAsc,
		arg.NameDesc,
		arg.OffsetAmount,
		arg.LimitAmount,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*)
FROM users
WHERE 
    (CASE WHEN $1 <> '' THEN name ILIKE CONCAT('%', $1, '%') ELSE TRUE END)
`

func (q *Queries) GetUsersCount(ctx context.Context, search interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCount, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}
